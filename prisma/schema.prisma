// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  icon        String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  menuItems   MenuItem[]
  
  @@map("categories")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  price       Int      // dalam rupiah
  description String?
  image       String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  categoryId  String
  
  // Relations
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  
  @@map("menu_items")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders    Order[]
  
  @@map("customers")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique @default(cuid())
  status      OrderStatus @default(PENDING)
  totalAmount Int         // total dalam rupiah
  notes       String?
  tableNumber String?
  orderType   OrderType   @default(DINE_IN)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Foreign Keys
  customerId  String?
  
  // Relations
  customer    Customer?   @relation(fields: [customerId], references: [id])
  orderItems  OrderItem[]
  payment     Payment?
  
  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Int    // harga per item saat order dibuat
  subtotal Int    // quantity * price
  notes    String?
  
  // Foreign Keys
  orderId    String
  menuItemId String
  
  // Relations
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
  
  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Int
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Foreign Keys
  orderId       String        @unique
  
  // Relations
  order         Order         @relation(fields: [orderId], references: [id])
  
  @@map("payments")
}

model Staff {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String?
  role      StaffRole @default(CASHIER)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("staff")
}

model Table {
  id          String      @id @default(cuid())
  number      String      @unique
  capacity    Int
  status      TableStatus @default(AVAILABLE)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("tables")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  SERVED
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  E_WALLET
  QRIS
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum StaffRole {
  ADMIN
  MANAGER
  CASHIER
  BARISTA
  WAITER
  KITCHEN
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}